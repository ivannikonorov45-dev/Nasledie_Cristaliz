// GitHub Storage - –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö!
console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º GitHub Storage –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è');
const firebaseAvailable = false;
console.log('Firebase –æ—Ç–∫–ª—é—á–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º GitHub API');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω
console.log('–°–∫—Ä–∏–ø—Ç script-responsive-2025.js –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ!');

// –û–±–ª–∞—á–Ω–∞—è/–ª–æ–∫–∞–ª—å–Ω–∞—è –ë–î, –º—É–ª—å—Ç–∏-–º–µ–¥–∏–∞ –∏ –∞–≤—Ç–æ-—Ä–µ—Å–∞–π–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
let currentUser = null;
let isAdmin = false;

// –°–∏—Å—Ç–µ–º–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
let syncInterval = null;
let lastSyncTime = 0;
let isOnline = navigator.onLine;
let syncInProgress = false;

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
let accumulatedPhotos = [];

// –£—Ç–∏–ª–∏—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: —Ä–µ—Å–∞–π–∑ –ø–æ–¥ –∫–∞—Ä—Ç–æ—á–∫–∏ (–º–∞–∫—Å —à–∏—Ä–∏–Ω–∞ x –≤—ã—Å–æ—Ç–∞)
async function resizeImage(file, maxW = 1200, maxH = 1200, mime = 'image/jpeg', quality = 0.85) {
    return new Promise((resolve, reject) => {
        const img = new Image();
        const reader = new FileReader();
        reader.onload = e => {
            img.onload = () => {
                let { width, height } = img;
                const ratio = Math.min(maxW / width, maxH / height, 1);
                const canvas = document.createElement('canvas');
                canvas.width = Math.round(width * ratio);
                canvas.height = Math.round(height * ratio);
                const ctx = canvas.getContext('2d');
                ctx.drawImage(img, 0, 0, canvas.width, canvas.height);
                canvas.toBlob(blob => {
                    resolve(blob);
                }, mime, quality);
            };
            img.onerror = reject;
            img.src = e.target.result;
        };
        reader.onerror = reject;
        reader.readAsDataURL(file);
    });
}

// –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å—Ç–æ—Ä —Å GitHub Storage
class Store {
    constructor() {
        this.useCloud = false;
        this.github = null;
        this.local = new LocalStorage();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º GitHub Storage –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        if (typeof GitHubStorage !== 'undefined') {
            this.github = new GitHubStorage();
            this.useCloud = true;
        }
    }
    
    _useGitHub() {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º GitHub –¥–ª—è —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤—Å–µ–≥–¥–∞ (–¥–∞–∂–µ –±–µ–∑ —Ç–æ–∫–µ–Ω–∞)
        // –¢–æ–∫–µ–Ω –Ω—É–∂–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞–ø–∏—Å–∏
        return this.useCloud && this.github;
    }
    
    _canWriteToGitHub() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ–º –ª–∏ –º—ã –ø–∏—Å–∞—Ç—å –≤ GitHub (–Ω—É–∂–µ–Ω —Ç–æ–∫–µ–Ω)
        return this.useCloud && this.github && this.github.token;
    }
    
    async saveData(data) {
        console.log('üíæ Store.saveData() –≤—ã–∑–≤–∞–Ω');
        console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º _canWriteToGitHub():', this._canWriteToGitHub());
        console.log('üîç store.github:', !!this.github);
        console.log('üîç store.github.token:', !!this.github?.token);
        console.log('üîç –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∞–Ω–Ω—ã—Ö:', { 
            users: data.users, 
            usersCount: Object.keys(data.users || {}).length,
            pets: data.pets,
            petsCount: (data.pets || []).length
        });
        
        // –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ó–ê–©–ò–¢–ê: –ù–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤—ã–≥–ª—è–¥—è—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ (–º–µ–Ω—å—à–µ 10 –ø–∏—Ç–æ–º—Ü–µ–≤)
        // –≠—Ç–æ –∑–∞—â–∏—â–∞–µ—Ç –æ—Ç —Å–ª—É—á–∞–π–Ω–æ–π –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏ –±–∞–∑—ã –ø—É—Å—Ç—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        const petsCount = (data.pets || []).length;
        if (petsCount === 0) {
            console.warn('‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ü–£–°–¢–û–ô –º–∞—Å—Å–∏–≤ –ø–∏—Ç–æ–º—Ü–µ–≤!');
            console.warn('‚ö†Ô∏è –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—à–∏–±–∫–æ–π! –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ...');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ localStorage –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è
            const localData = await this.local.loadData();
            if (localData.pets && localData.pets.length > 0) {
                console.error('üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê! –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ!');
                console.error('üö® –í localStorage –µ—Å—Ç—å', localData.pets.length, '–ø–∏—Ç–æ–º—Ü–µ–≤');
                console.error('üö® –°–û–•–†–ê–ù–ï–ù–ò–ï –û–¢–ú–ï–ù–ï–ù–û!');
                alert('–û–®–ò–ë–ö–ê: –ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—É—Å—Ç—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö! –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –¥–ª—è –∑–∞—â–∏—Ç—ã –¥–∞–Ω–Ω—ã—Ö.');
                return false;
            }
        }
        
        if (this._canWriteToGitHub()) {
            console.log('‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ GitHub...');
            try {
                const result = await this.github.saveData(data);
                console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ GitHub:', result);
                // –î—É–±–ª–∏—Ä—É–µ–º –≤ localStorage –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
                await this.local.saveData(data);
                console.log('‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ localStorage');
                return result;
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ GitHub:', error);
                console.log('‚ö†Ô∏è –ü—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ Local Storage...');
                return await this.local.saveData(data);
            }
        } else {
            console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Local Storage (–Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞ GitHub)');
            return await this.local.saveData(data);
        }
    }
    
    async loadData() {
        if (this._useGitHub()) {
            return await this.github.loadData();
        }
        return await this.local.loadData();
    }
    
    async uploadFile(fileOrBlob, path) { 
        if (this._canWriteToGitHub()) {
            return await this.github.uploadFile(fileOrBlob, path);
        }
        return await this.local.uploadFile(path, fileOrBlob); 
    }
}

// –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
class LocalStorage {
    async saveData(data) {
        try {
            localStorage.setItem('pitomnik_data', JSON.stringify(data));
            return true;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ localStorage:', error);
            return false;
        }
    }
    
    async loadData() {
        try {
            const data = localStorage.getItem('pitomnik_data');
            return data ? JSON.parse(data) : { users: {}, pets: [] };
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ localStorage:', error);
            return { users: {}, pets: [] };
        }
    }
    
    async uploadFile(path, fileOrBlob) {
        // –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º base64
        return new Promise((resolve, reject) => {
            const reader = new FileReader();
            reader.onload = () => resolve(reader.result);
            reader.onerror = reject;
            reader.readAsDataURL(fileOrBlob);
        });
    }
}

// –°–∏—Å—Ç–µ–º–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
class RealtimeSync {
    constructor() {
        this.interval = null;
        this.isRunning = false;
    }
    
    startSync() {
        if (this.isRunning) return;
        
        console.log('üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –û–¢–ö–õ–Æ–ß–ï–ù–ê –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ—Ç–µ—Ä–∏ –¥–∞–Ω–Ω—ã—Ö');
        console.log('üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å" –¥–ª—è —Ä—É—á–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
        this.isRunning = true;
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –û–¢–ö–õ–Æ–ß–ï–ù–ê
        // –û–Ω–∞ –≤—ã–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ—Ç–µ—Ä–µ–π –¥–∞–Ω–Ω—ã—Ö
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å" –¥–ª—è —Ä—É—á–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        
        // –ü–µ—Ä–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã - —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞, –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        // this.syncData(); // –û—Ç–∫–ª—é—á–µ–Ω–æ
    }
    
    stopSync() {
        if (this.interval) {
            clearInterval(this.interval);
            this.interval = null;
        }
        this.isRunning = false;
        console.log('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
    }
    
    async syncData() {
        if (syncInProgress) {
            console.log('‚ö†Ô∏è –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...');
            return;
        }
        
        syncInProgress = true;
        console.log('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö...');
        console.log('üìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', {
            users: Object.keys(db.users || {}).length,
            pets: (db.petsData || []).length
        });
        
        try {
            const currentData = { users: db.users, pets: db.petsData };
            const currentHash = this.getDataHash(currentData);
            
            console.log('üîç –•—ç—à –¥–∞–Ω–Ω—ã—Ö:', currentHash, '–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ö—ç—à:', lastSyncTime);
            
            if (currentHash !== lastSyncTime) {
                // –ó–ê–©–ò–¢–ê: –ù–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ
                if ((currentData.pets || []).length === 0) {
                    console.warn('‚ö†Ô∏è –û–¢–ú–ï–ù–ê –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò: –ø–æ–ø—ã—Ç–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ');
                    this.updateSyncStatus('error', '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ (–∑–∞—â–∏—Ç–∞ –æ—Ç –ø–æ—Ç–µ—Ä–∏ –¥–∞–Ω–Ω—ã—Ö)');
                    return;
                }
                
                await store.saveData(currentData);
                lastSyncTime = currentHash;
                this.updateSyncStatus('success', '–î–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
                console.log('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
            } else {
                console.log('‚ÑπÔ∏è –î–∞–Ω–Ω—ã–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
            this.updateSyncStatus('error', '–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
        } finally {
            syncInProgress = false;
        }
    }
    
    getDataHash(data) {
        return btoa(encodeURIComponent(JSON.stringify(data))).slice(0, 16);
    }
    
    updateSyncStatus(type, message) {
        const statusEl = document.getElementById('syncStatus');
        if (statusEl) {
            statusEl.textContent = message;
            statusEl.className = `sync-status ${type}`;
        }
    }
    
    showNotification(message, type = 'info') {
        const notification = document.createElement('div');
        notification.className = `notification notification-${type}`;
        notification.textContent = message;
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            background: #4CAF50;
            color: white;
            padding: 15px 20px;
            border-radius: 5px;
            z-index: 10000;
            animation: slideIn 0.3s ease;
        `;
        
        document.body.appendChild(notification);
        
        setTimeout(() => {
            notification.remove();
        }, 3000);
    }
    
    async forceSync() {
        console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è...');
        const currentData = { users: db.users, pets: db.petsData };
        console.log('üìä –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', {
            users: Object.keys(currentData.users || {}).length,
            pets: (currentData.pets || []).length,
            petNames: (currentData.pets || []).map(p => p.name)
        });
        
        // –ó–ê–©–ò–¢–ê: –ù–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ
        if ((currentData.pets || []).length === 0) {
            console.warn('‚ö†Ô∏è –û–¢–ú–ï–ù–ê –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò: –ø–æ–ø—ã—Ç–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ');
            this.showNotification('–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è', 'error');
            return;
        }
        
        try {
            console.log('–°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ GitHub...');
            const result = await store.saveData(currentData);
            console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ GitHub:', result);
            
            if (result) {
                this.showNotification('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!', 'success');
            } else {
                this.showNotification('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö', 'error');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
            this.showNotification('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: ' + error.message, 'error');
        }
    }
}

// –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
class Database {
    constructor() {
        this.users = {};
        this.petsData = [];
    }
    
    async load() {
        try {
            console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö...');
            console.log('Store._useGitHub():', store._useGitHub());
            console.log('Store.github:', !!store.github);
            console.log('Store.github.token:', !!store.github?.token);
            
            const data = await store.loadData();
            console.log('üì• –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –æ—Ç store.loadData():', data);
            
            this.users = data.users || {};
            this.petsData = data.pets || [];
            
            console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', Object.keys(this.users).length, '–ü–∏—Ç–æ–º—Ü–µ–≤:', this.petsData.length);
            console.log('üìä –°–æ–¥–µ—Ä–∂–∏–º–æ–µ this.users:', this.users);
            console.log('üìä –°–æ–¥–µ—Ä–∂–∏–º–æ–µ this.petsData:', this.petsData);
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–π –∞–∫–∫–∞—É–Ω—Ç
            console.log('=== –ü–†–û–í–ï–†–ö–ê –ê–î–ú–ò–ù–°–ö–û–ì–û –ê–ö–ö–ê–£–ù–¢–ê ===');
            console.log('db.users —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', !!this.users);
            console.log('db.users.Admin —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', !!this.users.Admin);
            console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º GitHub Storage:', store._useGitHub());
            
            if (!this.users.Admin) {
                console.log('–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–π –∞–∫–∫–∞—É–Ω—Ç...');
                this.users.Admin = {
                    password: 'TatyanaKiseleva1231',
                    role: 'admin',
                    email: 'tatyana02_76@mail.ru'
                };
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                await store.saveData({ users: this.users, pets: this.petsData });
                console.log('‚úÖ –ê–¥–º–∏–Ω—Å–∫–∏–π –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω');
            }
            
            return true;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
            return false;
        }
    }
    
    async saveUsers() {
        return await store.saveData({ users: this.users, pets: this.petsData });
    }
    
    async savePets() {
        return await store.saveData({ users: this.users, pets: this.petsData });
    }
    
    getUser(username) {
        return this.users[username];
    }
    
    async addUser(username, userData) {
        this.users[username] = userData;
        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω:', username);
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é
        return await store.saveData({ users: this.users, pets: this.petsData });
    }
    
    getAllPets() {
        return this.petsData;
    }
    
    addPet(petData) {
        petData.id = petData.id || Date.now();
        this.petsData.push(petData);
        // –ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - —ç—Ç–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ –≤—Ä—É—á–Ω—É—é –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        console.log('‚úÖ –ü–∏—Ç–æ–º–µ—Ü –¥–æ–±–∞–≤–ª–µ–Ω –≤ –º–∞—Å—Å–∏–≤, —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:', this.petsData.length);
        return true;
    }
    
    updatePet(petId, petData) {
        const index = this.petsData.findIndex(p => p.id === petId);
        if (index !== -1) {
            this.petsData[index] = { ...this.petsData[index], ...petData };
            // –ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - —ç—Ç–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ –≤—Ä—É—á–Ω—É—é –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
            console.log('‚úÖ –ü–∏—Ç–æ–º–µ—Ü –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –º–∞—Å—Å–∏–≤–µ, —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:', this.petsData.length);
            return true;
        }
        return false;
    }
    
    deletePet(petId) {
        const index = this.petsData.findIndex(p => p.id === petId);
        if (index !== -1) {
            this.petsData.splice(index, 1);
            // –ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - —ç—Ç–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ –≤—Ä—É—á–Ω—É—é –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
            console.log('‚úÖ –ü–∏—Ç–æ–º–µ—Ü —É–¥–∞–ª–µ–Ω –∏–∑ –º–∞—Å—Å–∏–≤–∞, —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:', this.petsData.length);
            return true;
        }
        return false;
    }
}

// –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–µ—Å—Å–∏–π
class SessionManager {
    saveSession(username, remember = false) {
        const session = {
            username: username,
            timestamp: Date.now(),
            remember: remember
        };
        localStorage.setItem('pitomnik_session', JSON.stringify(session));
    }
    
    loadSession() {
        const session = localStorage.getItem('pitomnik_session');
        return session ? JSON.parse(session) : null;
    }
    
    isSessionActive() {
        const session = this.loadSession();
        if (!session) return false;
        
        const maxAge = session.remember ? 30 * 24 * 60 * 60 * 1000 : 24 * 60 * 60 * 1000; // 30 –¥–Ω–µ–π –∏–ª–∏ 1 –¥–µ–Ω—å
        return (Date.now() - session.timestamp) < maxAge;
    }
    
    clearSession() {
        localStorage.removeItem('pitomnik_session');
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
const store = new Store();
const db = new Database();
const sessionManager = new SessionManager();

// –ü–†–û–°–¢–ê–Ø –ü–†–û–í–ï–†–ö–ê: –°–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω
console.log('=== SCRIPT-RESPONSIVE-2025.JS –ó–ê–ì–†–£–ñ–ï–ù ===');
console.log('–í—Ä–µ–º—è:', new Date().toISOString());

document.addEventListener('DOMContentLoaded', async function(){
    console.log('=== DOMContentLoaded –°–†–ê–ë–û–¢–ê–õ ===');
    try {
        console.log('=== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –°–ê–ô–¢–ê ===');
        console.log('–°–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω, –≤–µ—Ä—Å–∏—è:', new Date().toISOString());
        
        // GitHub Storage - –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö!
        console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º GitHub Storage - –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≥–ª–æ–±–∞–ª—å–Ω–æ');
        store.useCloud = true; // –í–∫–ª—é—á–∞–µ–º GitHub Storage —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º GitHub Storage —Å fallback
        if (store.github && typeof GitHubStorage !== 'undefined') {
            console.log('GitHub Storage –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
        } else {
            console.log('GitHub Storage –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å GitHub Storage
        if (store.github) {
            console.log('GitHub Storage —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
        } else {
            console.log('GitHub Storage –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        }
        
        console.log('–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ...');
        await db.load();
        console.log('–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', Object.keys(db.users).length, '–ü–∏—Ç–æ–º—Ü–µ–≤:', db.petsData.length);
        
        console.log('=== –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê ===');
        console.log('–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:', db.users);
        console.log('–ê–¥–º–∏–Ω—Å–∫–∏–π –∞–∫–∫–∞—É–Ω—Ç:', db.users.Admin);
        console.log('–ö–ª—é—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', Object.keys(db.users));
        
        console.log('–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å...');
        checkSavedSession();
        setupAuth();
        loadPets();
        setupFilters();
        setupMobileMenu();
        setupSmoothScrolling();
        setupForm();
        setupModals();
        setupAdminFunctions();
        if (window.emailjs && emailjs.init) { try { emailjs.init('public_demo_key'); } catch(e){} }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        console.log('–ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏...');
        realtimeSync.startSync();
        
        console.log('=== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê ===');
    } catch (error) {
        console.error('–û–®–ò–ë–ö–ê –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò:', error);
        alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∞–π—Ç–∞: ' + error.message);
    }
});

function checkSavedSession(){
    const session = sessionManager.loadSession();
    if (session && sessionManager.isSessionActive()){
        const userKey = Object.keys(db.users||{}).find(u => u.toLowerCase() === session.username.toLowerCase());
        const user = userKey ? db.getUser(userKey) : null;
        if (user){ currentUser = userKey; isAdmin = user.role==='admin'; updateUserInterface(); }
    } else {
        // –î–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤–∫–ª—é—á–∞—è –≥–æ—Å—Ç–µ–π) –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏
        currentUser = null;
        isAdmin = false;
        updateUserInterface();
    }
}

function setupAuth(){
    console.log('=== –ù–ê–°–¢–†–û–ô–ö–ê –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò ===');
    
    // –ü–†–û–°–¢–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ò—â–µ–º –∫–Ω–æ–ø–∫—É
    const loginBtn = document.getElementById('loginBtn');
    console.log('–ö–Ω–æ–ø–∫–∞ "–í–æ–π—Ç–∏" –Ω–∞–π–¥–µ–Ω–∞:', !!loginBtn);
    
    if (!loginBtn) {
        console.error('–û–®–ò–ë–ö–ê: –ö–Ω–æ–ø–∫–∞ "–í–æ–π—Ç–∏" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
        console.log('–í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å id loginBtn:', document.querySelectorAll('[id*="login"]'));
        return;
    }
    
    // –ü–†–û–°–¢–û–ï –î–û–ë–ê–í–õ–ï–ù–ò–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ê
    loginBtn.onclick = function(){ 
        console.log('–ö–Ω–æ–ø–∫–∞ "–í–æ–π—Ç–∏" –Ω–∞–∂–∞—Ç–∞!');
        const modal = document.getElementById('loginModal');
        if (modal) {
            modal.style.display='block';
            console.log('–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –æ—Ç–∫—Ä—ã—Ç–æ');
        } else {
            console.error('–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!');
        }
    };
    
    console.log('–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–í–æ–π—Ç–∏" –¥–æ–±–∞–≤–ª–µ–Ω');
    
    const tabButtons = document.querySelectorAll('.tab-btn');
    const authForms = document.querySelectorAll('.auth-form');
    tabButtons.forEach(btn=>btn.addEventListener('click',function(){
        const tab=this.getAttribute('data-tab');
        tabButtons.forEach(b=>b.classList.remove('active')); authForms.forEach(f=>f.classList.remove('active'));
        this.classList.add('active'); document.getElementById(tab+'Form').classList.add('active');
    }));

    const loginForm = document.getElementById('loginFormElement');
    const registerForm = document.getElementById('registerFormElement');
    const logoutBtn = document.getElementById('logoutBtn');

    loginForm.addEventListener('submit', function(e){
        e.preventDefault();
        const username = document.getElementById('loginUsername').value.trim();
        const password = document.getElementById('loginPassword').value;
        const githubToken = document.getElementById('githubToken').value.trim();
        const rememberMe = document.getElementById('rememberMe').checked;
        
        console.log('=== –ü–û–ü–´–¢–ö–ê –í–•–û–î–ê ===');
        console.log('–í–≤–µ–¥–µ–Ω–Ω—ã–π –ª–æ–≥–∏–Ω:', username);
        console.log('–í–≤–µ–¥–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å:', password);
        console.log('–í–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω:', githubToken ? '***' : '–Ω–µ –≤–≤–µ–¥–µ–Ω');
        console.log('–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –±–∞–∑–µ:', db.users);
        
        const userKey = Object.keys(db.users||{}).find(u => u.toLowerCase()===username.toLowerCase());
        const user = userKey ? db.getUser(userKey) : null;
        
        console.log('–ù–∞–π–¥–µ–Ω–Ω—ã–π –∫–ª—é—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userKey);
        console.log('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user);
        
        if (user && user.password===password){ 
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            if (user.role === 'admin') {
                if (!githubToken) {
                    alert('–î–ª—è –≤—Ö–æ–¥–∞ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ GitHub —Ç–æ–∫–µ–Ω!');
                    return;
                }
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                localStorage.setItem('github_token', githubToken);
                if (store.github) {
                    store.github.setToken(githubToken);
                }
                console.log('‚úÖ GitHub —Ç–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
            } else {
                // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É–¥–∞–ª—è–µ–º —Ç–æ–∫–µ–Ω
                localStorage.removeItem('github_token');
                if (store.github) {
                    store.github.setToken(null);
                }
                console.log('‚úÖ –¢–æ–∫–µ–Ω —É–¥–∞–ª–µ–Ω –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
            }
            
            currentUser=userKey; 
            isAdmin = user.role==='admin'; 
            sessionManager.saveSession(userKey, rememberMe); 
            updateUserInterface(); 
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞
            setTimeout(() => {
                loadPets();
                console.log('–ö–∞—Ä—Ç–æ—á–∫–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
            }, 100);
            document.getElementById('loginModal').style.display='none'; 
            loginForm.reset();
            alert(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${userKey}! –†–æ–ª—å: ${isAdmin?'–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä':'–ì–æ—Å—Ç—å'}`); 
        } else {
            alert('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å!');
        }
    });

    registerForm.addEventListener('submit', async function(e){
        e.preventDefault();
        const username = document.getElementById('regUsername').value.trim();
        const password = document.getElementById('regPassword').value;
        const confirmPassword = document.getElementById('regConfirmPassword').value;
        const email = document.getElementById('regEmail').value.trim();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –ª–æ–≥–∏–Ω–∞
        if (username.length<3) return alert('–õ–æ–≥–∏–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –∫–æ—Ä–æ—á–µ 3 —Å–∏–º–≤–æ–ª–æ–≤');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º email
        const emailRe = /^[^\s@]+@[^\s@]+\.[^\s@]{2,}$/i; 
        if(!emailRe.test(email)) return alert('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Email');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
        const strongPass=/^(?=.*[A-Za-z])(?=.*\d).{6,}$/; 
        if(!strongPass.test(password)) return alert('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –∫–æ—Ä–æ—á–µ 6 —Å–∏–º–≤–æ–ª–æ–≤ –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π
        if (password!==confirmPassword) return alert('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const existsKey = Object.keys(db.users||{}).find(u => u.toLowerCase()===username.toLowerCase()); 
        if (existsKey) return alert('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!');
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        let role = 'guest';
        if (username.toLowerCase() === 'admin') {
            role = 'admin';
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await db.addUser(username, { password, role, email });
        alert(`–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –†–æ–ª—å: ${role === 'admin' ? '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' : '–ì–æ—Å—Ç—å'}. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.`);
        document.querySelector('[data-tab="login"]').click();
        document.getElementById('loginUsername').value = username;
        registerForm.reset();
    });
    
    logoutBtn.addEventListener('click', function(){ 
        sessionManager.clearSession(); 
        currentUser=null; 
        isAdmin=false; 
        // –£–¥–∞–ª—è–µ–º —Ç–æ–∫–µ–Ω –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
        localStorage.removeItem('github_token');
        if (store.github) {
            store.github.setToken(null);
        }
        console.log('‚úÖ –¢–æ–∫–µ–Ω —É–¥–∞–ª–µ–Ω –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
        updateUserInterface(); 
        loadPets(); 
        alert('–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã'); 
    });
}

function updateUserInterface(){
    const userInfo = document.getElementById('userInfo');
    const loginBtn = document.getElementById('loginBtn');
    const logoutBtn = document.getElementById('logoutBtn');
    const addPetBtn = document.getElementById('addPetBtn');
    const addPuppyBtn = document.getElementById('addPuppyBtn');
    const addGraduateBtn = document.getElementById('addGraduateBtn');
    const addMemoryBtn = document.getElementById('addMemoryBtn');
    const addVideoBtn = document.getElementById('addVideoBtn');

    if (currentUser){
        userInfo.textContent = `–ü—Ä–∏–≤–µ—Ç, ${currentUser}! (${isAdmin?'–ê–¥–º–∏–Ω':'–ì–æ—Å—Ç—å'})`;
        loginBtn.style.display='none'; logoutBtn.style.display='inline-block';
        if (isAdmin){
            addPetBtn.style.display='inline-block';
            if (addPuppyBtn) addPuppyBtn.style.display='inline-block';
            if (addGraduateBtn) addGraduateBtn.style.display='inline-block';
            if (addMemoryBtn) addMemoryBtn.style.display='inline-block';
            if (addVideoBtn) addVideoBtn.style.display='inline-block';
        } else {
            addPetBtn.style.display='none';
            if (addPuppyBtn) addPuppyBtn.style.display='none';
            if (addGraduateBtn) addGraduateBtn.style.display='none';
            if (addMemoryBtn) addMemoryBtn.style.display='none';
            if (addVideoBtn) addVideoBtn.style.display='none';
        }
    } else {
        // –î–ª—è –≥–æ—Å—Ç–µ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞, –Ω–æ —Å–∫—Ä—ã–≤–∞–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
        userInfo.textContent='–ì–æ—Å—Ç—å'; 
        loginBtn.style.display='inline-block'; 
        logoutBtn.style.display='none'; 
        addPetBtn.style.display='none'; 
        if (addPuppyBtn) addPuppyBtn.style.display='none'; 
        if (addGraduateBtn) addGraduateBtn.style.display='none'; 
        if (addMemoryBtn) addMemoryBtn.style.display='none'; 
        if (addVideoBtn) addVideoBtn.style.display='none';
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –¥–∞–Ω–Ω—ã—Ö
    showDataStatus();
    loadPets();
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç—É—Å–∞ –¥–∞–Ω–Ω—ã—Ö
function showDataStatus() {
    const petsCount = db.getAllPets().length;
    const usersCount = Object.keys(db.users || {}).length;
    const isGitHub = store.useCloud && store.github;
    const syncStatus = isOnline ? 'üü¢ –û–Ω–ª–∞–π–Ω' : 'üî¥ –û—Ñ–ª–∞–π–Ω';
    
    // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–∞
    let statusIndicator = document.getElementById('dataStatus');
    if (!statusIndicator) {
        statusIndicator = document.createElement('div');
        statusIndicator.id = 'dataStatus';
        statusIndicator.style.cssText = `
            position: fixed;
            top: 80px;
            right: 20px;
            background: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 8px;
            padding: 10px;
            font-size: 12px;
            color: #666;
            z-index: 1000;
            max-width: 220px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        `;
        document.body.appendChild(statusIndicator);
    }
    
    statusIndicator.innerHTML = `
        <div style="font-weight: bold; margin-bottom: 5px;">üìä –°—Ç–∞—Ç—É—Å –¥–∞–Ω–Ω—ã—Ö</div>
        <div>üêï –ü–∏—Ç–æ–º—Ü–µ–≤: ${petsCount}</div>
        <div>üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${usersCount}</div>
        <div>${syncStatus}</div>
        <div id="syncStatus" style="margin-top: 5px; font-size: 10px; color: ${isGitHub ? '#28a745' : '#ffc107'};">
            ${isGitHub ? 'üîÑ GitHub Sync (–≤—Å–µ –≤–∏–¥—è—Ç)' : 'üíæ –õ–æ–∫–∞–ª—å–Ω–æ (—Ç–æ–ª—å–∫–æ —ç—Ç–æ—Ç –±—Ä–∞—É–∑–µ—Ä)'}
        </div>
        <button onclick="realtimeSync.forceSync()" style="margin-top: 5px; padding: 2px 6px; font-size: 10px; background: #007bff; color: white; border: none; border-radius: 3px; cursor: pointer;">
            üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å
        </button>
    `;
    
    // –°–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
        if (statusIndicator) {
            statusIndicator.style.opacity = '0.7';
        }
    }, 10000);
}

function setupModals(){
    const loginModal = document.getElementById('loginModal');
    const petModal = document.getElementById('petModal');
    const viewModal = document.getElementById('viewModal');
    const closeButtons = document.querySelectorAll('.close');
    closeButtons.forEach(b=>b.addEventListener('click', function(){ loginModal.style.display='none'; petModal.style.display='none'; if(viewModal) viewModal.style.display='none'; }));
    window.addEventListener('click', function(e){ if(e.target===loginModal) loginModal.style.display='none'; if(e.target===petModal) petModal.style.display='none'; if(viewModal && e.target===viewModal) viewModal.style.display='none'; });
    document.getElementById('addPetBtn').addEventListener('click', function(){ if(!isAdmin) return alert('–ù–µ—Ç –ø—Ä–∞–≤'); openPetModal(); });
    const addPuppyBtn=document.getElementById('addPuppyBtn'); const addGraduateBtn=document.getElementById('addGraduateBtn'); const addMemoryBtn=document.getElementById('addMemoryBtn');
    if (addPuppyBtn) addPuppyBtn.addEventListener('click', function(){ if(!isAdmin) return alert('–ù–µ—Ç –ø—Ä–∞–≤'); openPetModal(); document.getElementById('petStatus').value='puppy'; });
    if (addGraduateBtn) addGraduateBtn.addEventListener('click', function(){ if(!isAdmin) return alert('–ù–µ—Ç –ø—Ä–∞–≤'); openPetModal(); document.getElementById('petStatus').value='graduate'; });
    if (addMemoryBtn) addMemoryBtn.addEventListener('click', function(){ if(!isAdmin) return alert('–ù–µ—Ç –ø—Ä–∞–≤'); openPetModal(); document.getElementById('petStatus').value='memory'; });
    document.getElementById('petForm').addEventListener('submit', function(e){ e.preventDefault(); savePet(); });

    // –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Å –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ–º
    const photosInput = document.getElementById('petPhotos');
    if (photosInput) photosInput.addEventListener('change', function(e){
        const newFiles = Array.from(e.target.files || []);
        accumulatedPhotos = [...accumulatedPhotos, ...newFiles];
        updatePhotoPreview();
        console.log('–ù–∞–∫–æ–ø–ª–µ–Ω–æ —Ñ–æ—Ç–æ:', accumulatedPhotos.length);
    });
}

function updatePhotoPreview() {
    const preview = document.getElementById('photoPreview');
    if (preview) {
        preview.innerHTML = '';
        accumulatedPhotos.forEach((file, index) => {
            if (file.type.startsWith('image/')) {
            const reader = new FileReader();
            reader.onload = function(e) {
                    const img = document.createElement('img');
                    img.src = e.target.result;
                    img.style.cssText = 'max-width: 120px; max-height: 80px; margin: 5px; border-radius: 8px; border: 2px solid #e74c3c;';
                    img.title = `–§–æ—Ç–æ ${index + 1}: ${file.name}`;
                    preview.appendChild(img);
            };
            reader.readAsDataURL(file);
        }
    });
    }
}


function openPetModal(pet=null){
    console.log('=== –û–¢–ö–†–´–¢–ò–ï –ú–û–î–ê–õ–¨–ù–û–ì–û –û–ö–ù–ê ===');
    console.log('isAdmin:', isAdmin);
    console.log('pet:', pet);
    
    // –û—á–∏—â–∞–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    accumulatedPhotos = [];
    console.log('–ù–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –æ—á–∏—â–µ–Ω—ã');
    
    const modal=document.getElementById('petModal'); 
    const title=document.getElementById('modalTitle'); 
    const form=document.getElementById('petForm');
    
    console.log('–≠–ª–µ–º–µ–Ω—Ç—ã –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞:', {
        modal: !!modal,
        title: !!title,
        form: !!form
    });
    
    if (pet){
        title.textContent='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±–∞–∫—É';
        document.getElementById('petId').value=pet.id;
        document.getElementById('petName').value=pet.name;
        document.getElementById('petBreed').value=pet.breed;
        document.getElementById('petAge').value=pet.age;
        document.getElementById('petType').value=pet.type;
        document.getElementById('petGender').value=pet.gender||'male';
        document.getElementById('petStatus').value=pet.status||'breeding';
        document.getElementById('petDescription').value=pet.description;
        document.getElementById('photoPreview').innerHTML='';
        if (pet.photos && pet.photos.length > 0) {
            pet.photos.forEach((photo, index) => {
                const img = document.createElement('img');
                img.src = photo;
                img.style.cssText = 'max-width: 120px; max-height: 80px; margin: 5px; border-radius: 8px; border: 2px solid #e74c3c;';
                img.title = `–§–æ—Ç–æ ${index + 1}`;
                document.getElementById('photoPreview').appendChild(img);
            });
        }
        } else {
        title.textContent='–î–æ–±–∞–≤–∏—Ç—å —Å–æ–±–∞–∫—É'; 
        form.reset();
        document.getElementById('petId').value=''; 
        document.getElementById('photoPreview').innerHTML=''; 
    }
    modal.style.display='block'; 
    modal.scrollTop=0;
}

function closePetModal(){ 
    console.log('–ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ...');
    const modal = document.getElementById('petModal');
    if (modal) {
        modal.style.display='none';
        console.log('–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ');
    } else {
        console.error('–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!');
    }
}

async function savePet(){
    console.log('=== –ù–ê–ß–ê–õ–û –°–û–•–†–ê–ù–ï–ù–ò–Ø –ü–ò–¢–û–ú–¶–ê ===');
    console.log('isAdmin:', isAdmin);
    console.log('currentUser:', currentUser);
    
    if (!isAdmin) {
        alert('–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –ø–∏—Ç–æ–º—Ü–µ–≤!');
        return;
    }
    
    try {
        const form = document.getElementById('petForm');
        const formData = new FormData(form);
        
        console.log('–ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ä–º—É...');
        console.log('–§–æ—Ä–º–∞ –Ω–∞–π–¥–µ–Ω–∞:', !!form);
        
        // –°–æ–∑–¥–∞–µ–º FormData –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        console.log('–°–æ–∑–¥–∞–µ–º FormData...');
        
        const petId = document.getElementById('petId').value;
        console.log('ID –ø–∏—Ç–æ–º—Ü–∞:', petId);
        
        // –í–ê–ñ–ù–û: –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞ - –∑–∞–≥—Ä—É–∂–∞–µ–º –µ–≥–æ –¥–∞–Ω–Ω—ã–µ
        let petData;
        if (petId) {
            console.log('–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞, –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ...');
            const existingPet = db.petsData.find(p => p.id === petId);
            if (existingPet) {
                console.log('–ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–∏—Ç–æ–º–µ—Ü:', existingPet);
                // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
                petData = {
                    ...existingPet,
                    name: formData.get('name') || document.getElementById('petName').value,
                    breed: formData.get('breed') || document.getElementById('petBreed').value,
                    age: formData.get('age') || document.getElementById('petAge').value,
                    type: formData.get('type') || document.getElementById('petType').value,
                    gender: formData.get('gender') || document.getElementById('petGender').value,
                    status: formData.get('status') || document.getElementById('petStatus').value,
                    description: formData.get('description') || document.getElementById('petDescription').value,
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–æ—Ç–æ
                    photos: existingPet.photos || []
                };
                console.log('–î–∞–Ω–Ω—ã–µ –ø–∏—Ç–æ–º—Ü–∞ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö:', petData);
            } else {
                console.error('–ü–∏—Ç–æ–º–µ—Ü —Å ID', petId, '–Ω–µ –Ω–∞–π–¥–µ–Ω!');
                alert('–û—à–∏–±–∫–∞: –ø–∏—Ç–æ–º–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω!');
                return;
            }
        } else {
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞
            console.log('–°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞');
            petData = {
                name: formData.get('name') || document.getElementById('petName').value,
                breed: formData.get('breed') || document.getElementById('petBreed').value,
                age: formData.get('age') || document.getElementById('petAge').value,
                type: formData.get('type') || document.getElementById('petType').value,
                gender: formData.get('gender') || document.getElementById('petGender').value,
                status: formData.get('status') || document.getElementById('petStatus').value,
                description: formData.get('description') || document.getElementById('petDescription').value,
                photos: []
            };
        }
        
        console.log('–ò—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–∏—Ç–æ–º—Ü–∞:', petData);
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        console.log('üì∏ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ç–æ: –Ω–∞–∫–æ–ø–ª–µ–Ω–æ =', accumulatedPhotos.length, ', —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö =', petData.photos.length);
        if (accumulatedPhotos.length > 0) {
            console.log('–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ:', accumulatedPhotos.length, '—Ñ–∞–π–ª–æ–≤');
            for (let i = 0; i < accumulatedPhotos.length; i++) {
                const file = accumulatedPhotos[i];
                console.log(`–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ ${i+1}/${accumulatedPhotos.length}:`, file.name);
                try {
                    const resized = await resizeImage(file);
                    console.log(`–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª ${i+1}:`, file.name, '—Ç–∏–ø:', file.type, '—Ä–∞–∑–º–µ—Ä:', file.size);
                    console.log(`–§–∞–π–ª ${i+1} –æ–±—Ä–∞–±–æ—Ç–∞–Ω, —Ä–µ–∑—É–ª—å—Ç–∞—Ç:`, resized, '—Ç–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:', typeof resized, '–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä:', resized.constructor.name);
                    
                    const extension = file.name.split('.').pop().replace(/\s+/g, ''); // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
                    const path = `pets/images/${Date.now()}_${Math.random().toString(36).slice(2)}_${i}.${extension}`;
                    console.log(`–ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª ${i+1} –ø–æ –ø—É—Ç–∏:`, path);
                    const url = await store.uploadFile(resized, path);
                    petData.photos.push(url);
                    console.log(`–§–æ—Ç–æ ${i+1} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ:`, url);
                } catch (error) {
                    console.warn(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ ${i+1}:`, error.message);
                    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω–æ–µ —Ñ–æ—Ç–æ
                }
            }
            console.log('‚úÖ –§–æ—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã. –ò—Ç–æ–≥–æ —Ñ–æ—Ç–æ:', petData.photos.length);
        } else {
            console.log('‚ÑπÔ∏è –ù–æ–≤—ã—Ö —Ñ–æ—Ç–æ –Ω–µ—Ç, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ');
        }
        
        console.log('‚úÖ –ò–¢–û–ì–û: —Ñ–æ—Ç–æ =', petData.photos.length);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∏—Ç–æ–º—Ü–∞ –≤ –ø–∞–º—è—Ç–∏ (–ë–ï–ó —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä –ø–æ–∫–∞)
        console.log('–°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∏—Ç–æ–º—Ü–∞ –≤ –ø–∞–º—è—Ç–∏...');
        console.log('üìä –î–û —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: –ø–∏—Ç–æ–º—Ü–µ–≤ –≤ –±–∞–∑–µ =', db.petsData.length);
        
        if (petId) {
            console.log('–û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞ —Å ID:', petId);
            const result = await db.updatePet(petId, petData);
            console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', result);
        } else {
            console.log('–î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞');
            const result = await db.addPet(petData);
            console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:', result);
        }
        
        console.log('üìä –ü–û–°–õ–ï —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ø–∞–º—è—Ç–∏: –ø–∏—Ç–æ–º—Ü–µ–≤ –≤ –±–∞–∑–µ =', db.petsData.length);
        console.log('üìä –í—Å–µ –ø–∏—Ç–æ–º—Ü—ã:', db.petsData.map(p => p.name));
        
        // –í–ê–ñ–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ù–ê –°–ï–†–í–ï–† —Ç–æ–ª—å–∫–æ –û–î–ò–ù –†–ê–ó –ø–æ—Å–ª–µ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä...');
        try {
            const dataToSave = { 
                users: db.users, 
                pets: db.petsData 
            };
            console.log('üì¶ –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', {
                usersCount: Object.keys(dataToSave.users).length,
                petsCount: dataToSave.pets.length,
                petNames: dataToSave.pets.map(p => p.name)
            });
            
            const result = await store.saveData(dataToSave);
            console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä. –†–µ–∑—É–ª—å—Ç–∞—Ç:', result);
            
            // –û—á–∏—â–∞–µ–º –ø–æ–ª—è —Ñ–∞–π–ª–æ–≤ –ø–æ—Å–ª–µ –£–°–ü–ï–®–ù–û–ì–û —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            console.log('–û—á–∏—â–∞–µ–º –ø–æ–ª—è —Ñ–æ—Ä–º—ã...');
            document.getElementById('petPhotos').value = '';
            document.getElementById('photoPreview').innerHTML = '';
            
            // –û—á–∏—â–∞–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            accumulatedPhotos = [];
            console.log('–ü–æ–ª—è –æ—á–∏—â–µ–Ω—ã');
        
            console.log('–û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–∏—Ç–æ–º—Ü–µ–≤...');
            loadPets();
            console.log('–ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ...');
            closePetModal();
            console.log('=== –°–û–•–†–ê–ù–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û ===');
            
            alert('–ö–∞—Ä—Ç–æ—á–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!');
        } catch (error) {
            console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
            console.error('–°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error.stack);
            alert('–û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ! ' + error.message + '\n–î–∞–Ω–Ω—ã–µ –ù–ï –±—ã–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
            // –ù–ï –∑–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏ –æ—à–∏–±–∫–µ, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
            return;
        }
        
    } catch (error) {
        console.error('=== –û–®–ò–ë–ö–ê –ü–†–ò –°–û–•–†–ê–ù–ï–ù–ò–ò –ü–ò–¢–û–ú–¶–ê ===');
        console.error('–¢–∏–ø –æ—à–∏–±–∫–∏:', error.name);
        console.error('–°–æ–æ–±—â–µ–Ω–∏–µ:', error.message);
        console.error('–°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error.stack);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: ' + error.message);
    }
}

async function deletePet(petId){ 
    if(!isAdmin) return alert('–ù–µ—Ç –ø—Ä–∞–≤'); 
    if(!confirm('–£–¥–∞–ª–∏—Ç—å –ø–∏—Ç–æ–º—Ü–∞?')) return; 
    
    console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º –ø–∏—Ç–æ–º—Ü–∞ —Å ID:', petId);
    console.log('üìä –î–û —É–¥–∞–ª–µ–Ω–∏—è: –ø–∏—Ç–æ–º—Ü–µ–≤ –≤ –±–∞–∑–µ =', db.petsData.length);
    
    const success = await db.deletePet(petId); 
    
    if (success) {
        console.log('üìä –ü–û–°–õ–ï —É–¥–∞–ª–µ–Ω–∏—è: –ø–∏—Ç–æ–º—Ü–µ–≤ –≤ –±–∞–∑–µ =', db.petsData.length);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        try {
            await store.saveData({ users: db.users, pets: db.petsData });
            console.log('‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä');
            loadPets(); 
            alert('–ü–∏—Ç–æ–º–µ—Ü —É–¥–∞–ª–µ–Ω!');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è:', error);
            alert('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ' + error.message);
        }
    } else {
        alert('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–∏—Ç–æ–º—Ü–∞');
    }
}

function loadPets(){
    console.log('=== –ó–ê–ì–†–£–ó–ö–ê –ü–ò–¢–û–ú–¶–ï–í ===');
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ db:', {
        users: db.users,
        petsData: db.petsData,
        usersCount: Object.keys(db.users || {}).length,
        petsCount: (db.petsData || []).length
    });
    
    const petsGrid=document.getElementById('petsGrid'); 
    const puppiesGrid=document.getElementById('puppiesGrid'); 
    const graduatesGrid=document.getElementById('graduatesGrid'); 
    const memoryGrid=document.getElementById('memoryGrid');
    
    console.log('–°–µ—Ç–∫–∏ –Ω–∞–π–¥–µ–Ω—ã:', {
        petsGrid: !!petsGrid,
        puppiesGrid: !!puppiesGrid,
        graduatesGrid: !!graduatesGrid,
        memoryGrid: !!memoryGrid
    });
    
    if (petsGrid) petsGrid.innerHTML=''; 
    if (puppiesGrid) puppiesGrid.innerHTML=''; 
    if (graduatesGrid) graduatesGrid.innerHTML=''; 
    if (memoryGrid) memoryGrid.innerHTML='';
    
    const pets = db.getAllPets();
    console.log('üìä –í—Å–µ–≥–æ –ø–∏—Ç–æ–º—Ü–µ–≤ –≤ –±–∞–∑–µ:', pets.length);
    console.log('üìä –ü–∏—Ç–æ–º—Ü—ã:', pets);
    
    if (pets.length === 0) {
        console.warn('‚ö†Ô∏è –ù–ï–¢ –ü–ò–¢–û–ú–¶–ï–í –í –ë–ê–ó–ï –î–ê–ù–ù–´–•!');
        console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º db.petsData:', db.petsData);
        console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º db.users:', db.users);
    }
    
    pets.forEach((pet, index) => {
        console.log(`–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∏—Ç–æ–º—Ü–∞ ${index + 1}:`, pet);
        const card = createPetCard(pet);
        console.log('–°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ –¥–ª—è:', pet.name, '—Å—Ç–∞—Ç—É—Å:', pet.status);
        
        if (pet.status==='breeding' && petsGrid) {
            petsGrid.appendChild(card.cloneNode(true));
            console.log('–î–æ–±–∞–≤–ª–µ–Ω –≤ petsGrid');
        }
        else if (pet.status==='puppy' && puppiesGrid) {
            puppiesGrid.appendChild(card.cloneNode(true));
            console.log('–î–æ–±–∞–≤–ª–µ–Ω –≤ puppiesGrid');
        }
        else if (pet.status==='graduate' && graduatesGrid) {
            graduatesGrid.appendChild(card.cloneNode(true));
            console.log('–î–æ–±–∞–≤–ª–µ–Ω –≤ graduatesGrid');
        }
        else if (pet.status==='memory' && memoryGrid) {
            memoryGrid.appendChild(card.cloneNode(true));
            console.log('–î–æ–±–∞–≤–ª–µ–Ω –≤ memoryGrid');
        }
    });
    
    console.log('=== –ó–ê–ì–†–£–ó–ö–ê –ü–ò–¢–û–ú–¶–ï–í –ó–ê–í–ï–†–®–ï–ù–ê ===');
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
    setTimeout(() => {
        applyFilters();
    }, 100);
}

function createPetCard(pet){
    const card=document.createElement('div'); 
    card.className='pet-card'; 
    card.setAttribute('data-type', pet.type);
    card.setAttribute('data-gender', pet.gender || 'male');
    const adminControls = isAdmin ? `
        <div class="admin-controls">
            <button class="admin-btn edit-btn" onclick='openPetModal(${JSON.stringify(pet).replace(/"/g,"&quot;")})' title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"><i class="fas fa-edit"></i></button>
            <button class="admin-btn delete-btn" onclick="deletePet(${pet.id})" title="–£–¥–∞–ª–∏—Ç—å"><i class="fas fa-trash"></i></button>
        </div>` : '';

    let mediaContent='';
    const firstPhoto = Array.isArray(pet.photos) && pet.photos[0] ? pet.photos[0] : (pet.photo || null);
    
    // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    console.log(`–ö–∞—Ä—Ç–æ—á–∫–∞ ${pet.name}:`, {
        photos: pet.photos,
        firstPhoto: firstPhoto
    });
    
    if (firstPhoto && firstPhoto !== null && firstPhoto !== 'null'){ 
        console.log(`–ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ç–æ –¥–ª—è ${pet.name}:`, firstPhoto);
        mediaContent = `<img src="${firstPhoto}" alt="${pet.name}" onerror="console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', this.src); this.style.display='none'; this.nextElementSibling.style.display='block';"><i class="${pet.icon}" style="display:none;"></i>`; 
    }
    else { 
        console.log(`–ù–µ—Ç —Ñ–æ—Ç–æ –¥–ª—è ${pet.name}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–∫–æ–Ω–∫—É`);
        mediaContent = `<i class="${pet.icon}"></i>`; 
    }
    
    const genderIcon = pet.gender==='male'?'‚ôÇ':'‚ôÄ';
    const statusText = pet.status==='breeding'?'–ü–ª–µ–º–µ–Ω–Ω–æ–π': pet.status==='puppy'?'–©–µ–Ω–æ–∫': pet.status==='graduate'?'–í—ã–ø—É—Å–∫–Ω–∏–∫':'–ü–∞–º—è—Ç—å';
    
    card.innerHTML=`
        <div class="pet-image">
            ${mediaContent}
            ${adminControls}
        </div>
        <div class="pet-info">
            <h3>${pet.name} ${genderIcon}</h3>
            <p class="pet-breed">${pet.breed}</p>
            <p class="pet-status">${statusText}</p>
            <p class="pet-description">${pet.description}</p>
            <div class="pet-details">
                <span class="pet-age">${pet.age}</span>
                <div>
                    <button class="contact-btn" style="margin-right:8px" onclick="openViewModal(${pet.id})">–ü–æ–¥—Ä–æ–±–Ω–µ–µ</button>
                    <button class="contact-btn" onclick="contactAboutPet('${pet.name}')">–°–≤—è–∑–∞—Ç—å—Å—è</button>
            </div>
        </div>
        </div>`;
    return card;
}

function setupFilters(){ 
    const filterButtons=document.querySelectorAll('.filter-btn'); 
    filterButtons.forEach(btn=>btn.addEventListener('click',function(){ 
        // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å–æ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ –≤ —Ç–æ–π –∂–µ –≥—Ä—É–ø–ø–µ
        const group = this.closest('.filter-group');
        if (group) {
            group.querySelectorAll('.filter-btn').forEach(b=>b.classList.remove('active'));
        }
        this.classList.add('active'); 
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        applyFilters();
    })); 
}

function applyFilters() {
    const breedFilter = document.querySelector('.filter-group:first-child .filter-btn.active');
    const genderFilter = document.querySelector('.filter-group:last-child .filter-btn.active');
    
    const breedValue = breedFilter ? breedFilter.getAttribute('data-filter') : 'all';
    const genderValue = genderFilter ? genderFilter.getAttribute('data-gender') : 'all';
    
    console.log('–ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã:', { breed: breedValue, gender: genderValue });
    
    document.querySelectorAll('.pet-card').forEach(card=>{ 
        const breed = card.getAttribute('data-type');
        const gender = card.getAttribute('data-gender');
        
        const breedMatch = breedValue === 'all' || breed === breedValue;
        const genderMatch = genderValue === 'all' || gender === genderValue;
        
        card.style.display = (breedMatch && genderMatch) ? 'block' : 'none';
    }); 
}

function filterPets(filter){ 
    // –û—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
    applyFilters();
}

function setupMobileMenu(){ const hamburger=document.querySelector('.hamburger'); const navMenu=document.querySelector('.nav-menu'); if(hamburger&&navMenu){ hamburger.addEventListener('click', function(){ navMenu.classList.toggle('active'); hamburger.classList.toggle('active'); }); } }
function setupSmoothScrolling(){ document.querySelectorAll('.nav-link').forEach(link=>link.addEventListener('click', function(e){ e.preventDefault(); const target=document.querySelector(this.getAttribute('href')); if(target) target.scrollIntoView({behavior:'smooth', block:'start'}); })); }
function setupForm(){ const form=document.querySelector('.contact-form form'); if(form){ form.addEventListener('submit', function(e){ e.preventDefault(); const nameInput=this.querySelector('input[type="text"]'); const emailInput=this.querySelector('input[type="email"]'); const phoneInput=this.querySelector('input[type="tel"]'); const messageInput=this.querySelector('textarea'); const name=nameInput.value.trim(); const email=emailInput.value.trim(); const phone=phoneInput.value.trim(); const message=messageInput.value.trim(); [nameInput,emailInput,phoneInput,messageInput].forEach(inp=>{ const g=inp.closest('.form-group'); if(g){ g.classList.remove('invalid'); const err=g.querySelector('.error-text'); if(err) err.remove(); }}); let hasError=false; if(name.length<2){ showError(nameInput,'–í–≤–µ–¥–∏—Ç–µ –∏–º—è (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞)'); hasError=true;} const emailRe=/^[^\s@]+@[^\s@]+\.[^\s@]{2,}$/i; if(!emailRe.test(email)){ showError(emailInput,'–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email'); hasError=true;} const phoneRe=/(\+7|8)?\s?\(?\d{3}\)?[\s-]?\d{3}[\s-]?\d{2}[\s-]?\d{2}$/; if(phone && !phoneRe.test(phone)){ showError(phoneInput,'–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX –∏–ª–∏ 8XXXXXXXXXX'); hasError=true;} if(message.length<5){ showError(messageInput,'–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ'); hasError=true;} if(hasError) return; const templateParams={ to_email:'tatyana02_76@mail.ru', from_name:name, from_email:email, phone, message }; const onSuccess=()=>{ alert('–°–ø–∞—Å–∏–±–æ! –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.'); form.reset(); }; const onFail=()=>{ const subject=encodeURIComponent('–°–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–∞–π—Ç–∞ –ø–∏—Ç–æ–º–Ω–∏–∫–∞'); const body=encodeURIComponent(`–ò–º—è: ${name}\nEmail: ${email}\n–¢–µ–ª–µ—Ñ–æ–Ω: ${phone}\n\n–°–æ–æ–±—â–µ–Ω–∏–µ:\n${message}`); window.location.href=`mailto:tatyana02_76@mail.ru?subject=${subject}&body=${body}`; alert('–û—Ç–∫—Ä—ã—Ç –ø–æ—á—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞.'); form.reset(); }; if(window.emailjs && emailjs.send){ emailjs.send('service_default','template_default',templateParams).then(onSuccess).catch(onFail); } else onFail(); }); } }
function showError(inputEl,text){ const group=inputEl.closest('.form-group'); if(!group) return; group.classList.add('invalid'); const span=document.createElement('div'); span.className='error-text'; span.textContent=text; group.appendChild(span); }
function contactAboutPet(petName){ alert(`–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å –∫ ${petName}! –°–≤—è–∑—å: 8 905 899-37-67 ‚Äî –¢–∞—Ç—å—è–Ω–∞, email: tatyana02_76@mail.ru. –†–æ—Å—Å–∏—è, –û—Ä–µ–Ω–±—É—Ä–≥—Å–∫–∞—è –æ–±–ª., –≥. –û—Ä—Å–∫.`); }
window.addEventListener('scroll', function(){ const navbar=document.querySelector('.navbar'); if(window.scrollY>100){ navbar.style.background='rgba(255, 255, 255, 0.95)'; navbar.style.backdropFilter='blur(10px)'; } else { navbar.style.background='#fff'; navbar.style.backdropFilter='none'; } });

function openViewModal(petId){ 
    const pet = db.getAllPets().find(p=>p.id===petId); 
    if(!pet) return; 
    const viewModal=document.getElementById('viewModal'); 
    const viewContent=document.getElementById('viewContent'); 
    const genderIcon = pet.gender==='male'?'‚ôÇ':'‚ôÄ'; 
    const statusText = pet.status==='breeding'?'–ü–ª–µ–º–µ–Ω–Ω–æ–π': pet.status==='puppy'?'–©–µ–Ω–æ–∫': pet.status==='graduate'?'–í—ã–ø—É—Å–∫–Ω–∏–∫':'–ü–∞–º—è—Ç—å'; 
    const firstPhoto = Array.isArray(pet.photos)&&pet.photos[0]?pet.photos[0]:(pet.photo||null); 
    const primaryMedia = firstPhoto; 
    const mediaHtml = primaryMedia ? `<img src="${primaryMedia}" alt="${pet.name}">` : `<i class="${pet.icon}"></i>`;
    
    // –ì–∞–ª–µ—Ä–µ—è –º–∏–Ω–∏–∞—Ç—é—Ä —Å –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–º —Å–∫—Ä–æ–ª–ª–æ–º
    let thumbs = '';
    const allImages = Array.isArray(pet.photos)?pet.photos:[];
    const thumbItems = [ ...allImages.map(src=>({type:'img',src})) ];
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–∞–ª–µ—Ä–µ—é –µ—Å–ª–∏ –µ—Å—Ç—å –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ —Ñ–æ—Ç–æ
    if (thumbItems.length > 1){
        thumbs = `
            <div style="margin-top:15px;">
                <h4 style="margin-bottom:10px; color:#666;">–ì–∞–ª–µ—Ä–µ—è (${thumbItems.length} —Ñ–æ—Ç–æ):</h4>
                <div style="display:flex;gap:8px;overflow-x:auto;padding:10px;background:#f9f9f9;border-radius:8px;border:1px solid #e0e0e0;">
                    ${thumbItems.map((it, index)=> 
                        `<img src="${it.src}" style="width:80px;height:80px;object-fit:cover;cursor:pointer;border-radius:8px;flex-shrink:0;border:2px solid transparent;" onclick="swapPrimaryMedia('${pet.id}','${it.src}','img')" title="–§–æ—Ç–æ ${index+1}" onmouseover="this.style.border='2px solid #e74c3c'" onmouseout="this.style.border='2px solid transparent'">`
                    ).join('')}
                </div>
            </div>`;
    }
    
    viewContent.innerHTML = `
        <div class="view-grid">
            <div class="view-image" id="viewPrimaryMedia">${mediaHtml}</div>
            <div class="view-info">
                <h3>${pet.name} ${genderIcon}</h3>
                <div class="view-row"><strong>–ü–æ—Ä–æ–¥–∞:</strong> ${pet.breed}</div>
                <div class="view-row"><strong>–°—Ç–∞—Ç—É—Å:</strong> ${statusText}</div>
                <div class="view-row"><strong>–í–æ–∑—Ä–∞—Å—Ç:</strong> ${pet.age}</div>
                <div class="view-row"><strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> ${pet.description}</div>
                <div class="view-row"><strong>–ö–æ–Ω—Ç–∞–∫—Ç—ã:</strong> 8 905 899-37-67 ‚Äî –¢–∞—Ç—å—è–Ω–∞, tatyana02_76@mail.ru</div>
                <button class="contact-btn" onclick="contactAboutPet('${pet.name}')">–°–≤—è–∑–∞—Ç—å—Å—è</button>
                ${thumbs}
            </div>
        </div>`;
    viewModal.style.display='block';
}
function swapPrimaryMedia(petId, src, type){ const el=document.getElementById('viewPrimaryMedia'); if(!el) return; el.innerHTML = `<img src="${src}" alt="">`; }

function setupAdminFunctions(){
    // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞
    window.dbExport = function(){
        const data = { users: db.users, pets: db.getAllPets(), exportDate: new Date().toISOString() };
        const blob = new Blob([JSON.stringify(data,null,2)], {type:'application/json'});
        const url = URL.createObjectURL(blob); const a=document.createElement('a'); a.href=url; a.download=`pitomnik_backup_${new Date().toISOString().split('T')[0]}.json`; document.body.appendChild(a); a.click(); document.body.removeChild(a); URL.revokeObjectURL(url);
    };
    
    window.importData = function(){ document.getElementById('importFile').click(); };
    
    // –§—É–Ω–∫—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ localStorage
    window.restoreFromLocalStorage = async function(){
        if (!isAdmin) {
            alert('–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ!');
            return;
        }
        
        if (!confirm('–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –∫–æ–ø–∏–∏? –≠—Ç–æ –ø–µ—Ä–µ–∑–∞–ø–∏—à–µ—Ç —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ.')) {
            return;
        }
        
        try {
            const localData = await store.local.loadData();
            console.log('üì¶ –î–∞–Ω–Ω—ã–µ –∏–∑ localStorage:', {
                users: Object.keys(localData.users || {}).length,
                pets: (localData.pets || []).length
            });
            
            if ((localData.pets || []).length === 0) {
                alert('–í –ª–æ–∫–∞–ª—å–Ω–æ–π –∫–æ–ø–∏–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è!');
                return;
            }
            
            db.users = localData.users || {};
            db.petsData = localData.pets || [];
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            await store.saveData({ users: db.users, pets: db.petsData });
            
            loadPets();
            alert(`–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã! –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ${db.petsData.length} –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–∏—Ç–æ–º—Ü–µ–≤.`);
            console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ localStorage');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
            alert('–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: ' + error.message);
        }
    };
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–º–ø–æ—Ä—Ç–∞ —Ñ–∞–π–ª–æ–≤
    const importFile = document.getElementById('importFile');
    if (importFile) {
        importFile.addEventListener('change', async function(e){
            const file = e.target.files[0];
            if (!file) return;
            
            try {
                const text = await file.text();
                const data = JSON.parse(text);
                
                if (data.users && data.pets) {
                    db.users = data.users;
                    db.petsData = data.pets;
                    await db.saveUsers();
                    await db.savePets();
                    loadPets();
                    alert('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!');
                } else {
                    alert('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞!');
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞:', error);
                alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö: ' + error.message);
            }
        });
    }
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∏—Å—Ç–µ–º—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
const realtimeSync = new RealtimeSync();

// –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏
window.realtimeSync = realtimeSync;
window.db = db;
window.store = store;
