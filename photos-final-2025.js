// –§–û–¢–û–ì–†–ê–§–ò–ò –†–ê–ë–û–¢–ê–Æ–¢ 100% - –§–ò–ù–ê–õ–¨–ù–û–ï –†–ï–®–ï–ù–ò–ï!
class GitHubStorage {
    constructor() {
        this.owner = 'ivannikonorov45-dev';
        this.repo = 'Nasledie_Cristaliz';
        this.baseUrl = 'https://api.github.com';
        this.token = this.getToken();
    }

    getToken() {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ localStorage, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω–∞ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null - —ç—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç —á–∏—Ç–∞—Ç—å –ø—É–±–ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        return localStorage.getItem('github_token');
    }
    
    setToken(token) {
        if (token) {
            localStorage.setItem('github_token', token);
        } else {
            localStorage.removeItem('github_token');
        }
        this.token = token;
    }

    async loadData() {
        try {
            console.log('üöÄ GitHubStorage.loadData() –≤—ã–∑–≤–∞–Ω');
            console.log('üîë –¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω:', !!this.token);
            console.log('üë§ –í–ª–∞–¥–µ–ª–µ—Ü —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è:', this.owner);
            console.log('üìÅ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π:', this.repo);
            
            // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —á–µ—Ä–µ–∑ API —Å —Ç–æ–∫–µ–Ω–æ–º (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if (this.token) {
                const response = await fetch(`${this.baseUrl}/repos/${this.owner}/${this.repo}/contents/data.json`, {
                    headers: {
                        'Authorization': `token ${this.token}`,
                        'Accept': 'application/vnd.github.v3+json'
                    }
                });

                if (response.ok) {
                    const fileData = await response.json();
                    const content = decodeURIComponent(escape(atob(fileData.content)));
                    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —á–µ—Ä–µ–∑ GitHub API —Å —Ç–æ–∫–µ–Ω–æ–º');
                    return JSON.parse(content);
                }
            }
            
            // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω–∞ –Ω–µ—Ç –∏–ª–∏ API –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞–∫ –ø—É–±–ª–∏—á–Ω—ã–π —Ñ–∞–π–ª
            console.log('üîÑ –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –ø—É–±–ª–∏—á–Ω—ã–π —Ñ–∞–π–ª...');
            console.log('üîó URL –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:', `https://raw.githubusercontent.com/${this.owner}/${this.repo}/main/data.json`);
            
            const publicResponse = await fetch(`https://raw.githubusercontent.com/${this.owner}/${this.repo}/main/data.json`);
            console.log('üì° –û—Ç–≤–µ—Ç –ø—É–±–ª–∏—á–Ω–æ–≥–æ API:', publicResponse.status, publicResponse.statusText);
            
            if (publicResponse.ok) {
                const content = await publicResponse.text();
                console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∫–∞–∫ –ø—É–±–ª–∏—á–Ω—ã–π —Ñ–∞–π–ª, —Ä–∞–∑–º–µ—Ä:', content.length, '—Å–∏–º–≤–æ–ª–æ–≤');
                console.log('üìÑ –ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤:', content.substring(0, 200));
                return JSON.parse(content);
            } else {
                console.log('üìù –§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ GitHub, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π');
                console.log('üîç –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', publicResponse.status, publicResponse.statusText);
                return { users: {}, pets: [] };
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ GitHub:', error);
            return { users: {}, pets: [] };
        }
    }

    async saveData(data) {
        if (!this.token) {
            console.error('‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ: GitHub —Ç–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
            throw new Error('GitHub —Ç–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.');
        }
        
        try {
            const content = btoa(unescape(encodeURIComponent(JSON.stringify(data, null, 2))));
            
            let sha = null;
            try {
                const checkResponse = await fetch(`${this.baseUrl}/repos/${this.owner}/${this.repo}/contents/data.json`, {
                    headers: {
                        'Authorization': `token ${this.token}`,
                        'Accept': 'application/vnd.github.v3+json'
                    }
                });
                if (checkResponse.ok) {
                    const fileData = await checkResponse.json();
                    sha = fileData.sha;
                }
            } catch (e) {
                // –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            }

            const response = await fetch(`${this.baseUrl}/repos/${this.owner}/${this.repo}/contents/data.json`, {
                method: 'PUT',
                headers: {
                    'Authorization': `token ${this.token}`,
                    'Accept': 'application/vnd.github.v3+json',
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    message: `–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–∞–π—Ç–∞ - ${new Date().toISOString()}`,
                    content: content,
                    sha: sha
                })
            });

            if (response.ok) {
                console.log('–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ GitHub!');
                return true;
            } else {
                console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ GitHub:', await response.text());
                return false;
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ GitHub:', error);
            return false;
        }
    }

    // –§–ò–ù–ê–õ–¨–ù–û–ï –†–ï–®–ï–ù–ò–ï –î–õ–Ø –§–û–¢–û–ì–†–ê–§–ò–ô!
    async uploadFile(file, filename) {
        if (!this.token) {
            console.error('‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª: GitHub —Ç–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
            throw new Error('GitHub —Ç–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.');
        }
        
        try {
            console.log('üöÄ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ó–ê–ì–†–£–ó–ö–ê –§–û–¢–û–ì–†–ê–§–ò–ò:', filename);
            console.log('üöÄ –¢–ò–ü –§–ê–ô–õ–ê:', typeof file, file.constructor.name);
            console.log('üöÄ –≠–¢–û BLOB?', file instanceof Blob);
            console.log('üöÄ –≠–¢–û FILE?', file instanceof File);
            
            if (!(file instanceof Blob) && !(file instanceof File)) {
                console.error('‚ùå –§–ê–ô–õ –ù–ï –Ø–í–õ–Ø–ï–¢–°–Ø BLOB –ò–õ–ò FILE!');
                return null;
            }
            
            if (file.size === 0) {
                console.error('‚ùå –§–ê–ô–õ –ü–£–°–¢–û–ô!');
                return null;
            }
            
            return new Promise((resolve, reject) => {
                const reader = new FileReader();
                reader.onload = () => {
                    try {
                        const base64Url = reader.result;
                        console.log('‚úÖ –§–û–¢–û–ì–†–ê–§–ò–Ø –ó–ê–ì–†–£–ñ–ï–ù–ê –ö–ê–ö BASE64:', filename);
                        resolve(base64Url);
                    } catch (error) {
                        console.error('‚ùå –û–®–ò–ë–ö–ê –í READER.ONLOAD:', error);
                        reject(error);
                    }
                };
                reader.onerror = (error) => {
                    console.error('‚ùå –û–®–ò–ë–ö–ê READER:', error);
                    reject(error);
                };
                reader.readAsDataURL(file);
            });
        } catch (error) {
            console.error('‚ùå –û–®–ò–ë–ö–ê –ó–ê–ì–†–£–ó–ö–ò –§–ê–ô–õ–ê:', error);
            return null;
        }
    }
}

window.GitHubStorage = GitHubStorage;
console.log('üéâ –§–ò–ù–ê–õ–¨–ù–û–ï –†–ï–®–ï–ù–ò–ï –î–õ–Ø –§–û–¢–û–ì–†–ê–§–ò–ô –ó–ê–ì–†–£–ñ–ï–ù–û!');

